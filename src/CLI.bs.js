// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function buildColorCssVars(_acc, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var match = param[0];
      _param = param[1];
      _acc = acc + ("  --" + (match[/* name */0] + (": #" + (match[/* hex */1] + ";\n"))));
      continue ;
      
    } else {
      return acc;
    }
  };
}

function buildTypoCssVars(_acc, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var match = param[0];
      _param = param[1];
      _acc = acc + ("  --" + (match[/* name */0] + (": " + (match[/* value */1] + ";\n"))));
      continue ;
      
    } else {
      return acc;
    }
  };
}

function buildCssVars(param) {
  if (param.tag) {
    return buildTypoCssVars("", param[0]);
  } else {
    return buildColorCssVars("", param[0]);
  }
}

function buildColors(colorsDir) {
  console.log("Building Color Variables!");
  console.log("Reading data from " + colorsDir);
  var clrs = List.map((function (json) {
          return /* record */[
                  /* name */Caml_array.caml_array_get(Json_decode.field("overrideValues", (function (param) {
                              return Json_decode.array((function (param) {
                                            return Json_decode.field("value", Json_decode.string, param);
                                          }), param);
                            }), json), 0),
                  /* hex */Caml_array.caml_array_get(Json_decode.field("overrideValues", (function (param) {
                              return Json_decode.array((function (param) {
                                            return Json_decode.field("value", Json_decode.string, param);
                                          }), param);
                            }), json), 1)
                ];
        }), List.map(Json.parseOrRaise, List.map((function (file) {
                  return Fs.readFileSync(colorsDir + ("/" + file), "utf8");
                }), List.filter((function (file) {
                        if (file !== "page.json") {
                          return +file.includes(".json");
                        } else {
                          return /* false */0;
                        }
                      }))($$Array.to_list(Fs.readdirSync(colorsDir))))));
  return /* Colors */Block.__(0, [clrs]);
}

function buildTypography(typographyDir) {
  console.log("Building Typography Variables");
  console.log("Reading data from " + typographyDir);
  var dir = List.hd(List.filter((function (file) {
                return +(file !== "page.json");
              }))($$Array.to_list(Fs.readdirSync(typographyDir))));
  var typos = List.map((function (json) {
          return /* record */[
                  /* name */Caml_array.caml_array_get(Json_decode.field("overrideValues", (function (param) {
                              return Json_decode.array((function (param) {
                                            return Json_decode.field("value", Json_decode.string, param);
                                          }), param);
                            }), json), 0),
                  /* value */Caml_array.caml_array_get(Json_decode.field("overrideValues", (function (param) {
                              return Json_decode.array((function (param) {
                                            return Json_decode.field("value", Json_decode.string, param);
                                          }), param);
                            }), json), 1)
                ];
        }), List.map(Json.parseOrRaise, List.map((function (file) {
                  return Fs.readFileSync(typographyDir + ("/" + (dir + ("/" + file))), "utf8");
                }), List.filter((function (file) {
                        return +(file !== "artboard.json");
                      }))($$Array.to_list(Fs.readdirSync(typographyDir + ("/" + dir)))))));
  return /* Typography */Block.__(1, [typos]);
}

function buildVars() {
  var colorVars = buildColors("design/variables/--colors");
  var typoVars = buildTypography("design/swarm_design_tokens/typography");
  return ":root {\n" + (buildCssVars(colorVars) + (buildCssVars(typoVars) + "}"));
}

function run() {
  var variables = buildVars(/* () */0);
  Fs.writeFileSync("demo/src/style/variables.css", variables, "utf8");
  return /* () */0;
}

run(/* () */0);

((
    Fs.watch("design", { encoding: 'buffer' }, function() {
      run();
    })
  ));

exports.buildColorCssVars = buildColorCssVars;
exports.buildTypoCssVars = buildTypoCssVars;
exports.buildCssVars = buildCssVars;
exports.buildColors = buildColors;
exports.buildTypography = buildTypography;
exports.buildVars = buildVars;
exports.run = run;
/*  Not a pure module */
